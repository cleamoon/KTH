/* Labb 2 i DD1352 Algoritmer, datastrukturer och komplexitet    */
/* Se labbanvisning under kurssidan http://www.csc.kth.se/DD1352 */
/* Ursprunglig f√∂rfattare: Viggo Kann KTH viggo@nada.kth.se      */
import java.util.LinkedList;
import java.util.List;

public class ClosestWords {
  LinkedList<String> closestWords = null;

  int closestDistance = -1;

  int partDist(String w1, String w2, int w1len, int w2len) {
    if (w1len == 0)
      return w2len;
    if (w2len == 0)
      return w1len;
    int res = partDist(w1, w2, w1len - 1, w2len - 1) + 
	(w1.charAt(w1len - 1) == w2.charAt(w2len - 1) ? 0 : 1);
    int addLetter = partDist(w1, w2, w1len - 1, w2len) + 1;
    if (addLetter < res)
      res = addLetter;
    int deleteLetter = partDist(w1, w2, w1len, w2len - 1) + 1;
    if (deleteLetter < res)
      res = deleteLetter;
    return res;
  }
  
  int partDist2(String w1, String w2, int l1, int l2) {
	  int[][] M =  new int [l1+1][l2+1];
	  for(int i = 0; i<=l1; i++) M[i][0]=i;
	  for(int j = 0; j<=l2; j++) M[0][j]=j;
	  for(int i = 1; i<=l1; i++) 
	  	for(int j = 1; j<=l2; j++) {
	  		M[i][j] = Math.min(M[i-1][j-1] + (w1.charAt(i - 1) == w2.charAt(j - 1) ? 0 : 1), 
	  				Math.min(M[i-1][j]+1, M[i][j-1]+1));
	  	}
	  return M[l1][l2];
  }

  int Distance(String w1, String w2) {
    return partDist2(w1, w2, w1.length(), w2.length());
  }

  public ClosestWords(String w, List<String> wordList) {
	  
	for(int x=0; x<5; x++) {
		for(int y=0; y<5; y++) {
			System.out.print("x: " + x + " y: " + y + " = " + partDist2("labd", "blad", x, y) + '\n'); 
		}
	}
	
    for (String s : wordList) {
      int dist = Distance(w, s);
      // System.out.println("d(" + w + "," + s + ")=" + dist);
      if (dist < closestDistance || closestDistance == -1) {
        closestDistance = dist;
        closestWords = new LinkedList<String>();
        closestWords.add(s);
      }
      else if (dist == closestDistance)
        closestWords.add(s);
    }
  }

  int getMinDistance() {
    return closestDistance;
  }

  List<String> getClosestWords() {
    return closestWords;
  }
}
